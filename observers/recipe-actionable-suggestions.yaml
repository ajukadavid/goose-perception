version: 1.0.0
title: Actionable Avatar Suggestions
author:
  contact: mic
description: Generate actionable avatar suggestions with specific executable actions
instructions: |
  analyze work patterns and generate actionable suggestions that the avatar can execute
  focus on specific actions like sending emails, creating meetings, updating status, managing tasks
extensions:
- type: builtin
  name: developer
  display_name: Developer
  timeout: 300
  bundled: true

parameters:
- key: personality_name
  input_type: string
  requirement: optional
  default: "Comedian"
  description: "Name of the avatar personality"
- key: personality_style
  input_type: string
  requirement: optional
  default: "Everything is an opportunity for humor. Makes jokes about coding, work situations, and daily activities. Keeps things light and funny."
  description: "Style description for the personality"
- key: personality_tone
  input_type: string
  requirement: optional
  default: "humorous, witty, entertaining, lighthearted"
  description: "Tone characteristics for the personality"
- key: personality_priorities
  input_type: string
  requirement: optional
  default: "humor, entertainment, making people laugh, finding the funny side"
  description: "Key priorities for the personality"
- key: personality_phrases
  input_type: string
  requirement: optional
  default: "Why did the developer, Speaking of comedy, Here's a joke for you, Plot twist comedy, Funny thing about"
  description: "Example phrases characteristic of the personality"
- key: latest_work_content
  input_type: string
  requirement: optional
  default: ""
  description: "Content of LATEST_WORK.md file"
- key: interactions_content
  input_type: string
  requirement: optional
  default: ""
  description: "Content of INTERACTIONS.md file"
- key: contributions_content
  input_type: string
  requirement: optional
  default: ""
  description: "Content of CONTRIBUTIONS.md file"
- key: work_content
  input_type: string
  requirement: optional
  default: ""
  description: "Content of WORK.md file"
- key: activity_log_content
  input_type: string
  requirement: optional
  default: ""
  description: "Content of ACTIVITY-LOG.md file"
- key: current_time
  input_type: string
  requirement: optional
  default: ""
  description: "Current local time"
- key: timezone
  input_type: string
  requirement: optional
  default: ""
  description: "User's local timezone"
- key: last_suggestion
  input_type: string
  requirement: optional
  default: ""
  description: "Most recent suggestion already shown, to prevent repetition"

prompt: |
  CURRENT LOCAL TIME: {{ current_time }}
  TIMEZONE: {{ timezone }}
  
  **PERSONALITY CONTEXT:**
  {{ personality_name }} Avatar Personality
  Style: {{ personality_style }}
  Tone: {{ personality_tone }}
  Key Priorities: {{ personality_priorities }}
  Typical Phrases: {{ personality_phrases }}
  
  **GOOSE MCP (MODEL CONTEXT PROTOCOL) CAPABILITIES:**
  Goose integrates with MCP servers to provide external tool access:
  - MCP servers provide tools, resources, and prompts for LLM interactions
  - Common MCP servers available: Slack, GitHub, file systems, databases, APIs, etc.
  - MCP servers are configured in Goose's configuration, not enabled via command line
  - Actions should leverage available MCP tools when possible
  - If MCP integration is needed, suggest configuring appropriate MCP servers
  
  **WORK PATTERN DATA:**
  
  **LATEST_WORK.md (current focus):**
  {{ latest_work_content }}
  
  **INTERACTIONS.md (recent collaborations):**
  {{ interactions_content }}
  
  **CONTRIBUTIONS.md (recent activity):**
  {{ contributions_content }}
  
  **WORK.md (detailed work log):**
  {{ work_content }}
  
  **ACTIVITY-LOG.md (recent system activity):**
  {{ activity_log_content }}
  
  **LAST SUGGESTION (avoid repeating):**
  {{ last_suggestion }}
  
  Ensure the new actionable suggestion is substantially different from the last_suggestion; do NOT recommend the same exact action or message.
  
  Analyze the work patterns in the data above and generate actionable suggestions that reflect the {{ personality_name }} personality.
  Look for specific patterns that need action:
  
  **COMMUNICATION GAPS:**
  - No updates sent to team/channels in X days
  - Meetings scheduled but no follow-up
  - Messages/emails that need responses
  - Status not updated recently
  
  **WORK PATTERNS:**
  - Tasks started but not completed
  - Work stopped abruptly on important items
  - Deadlines approaching without progress
  - Recurring tasks that might be due
  
  **PRODUCTIVITY OPPORTUNITIES:**
  - Good time for specific types of work
  - Should schedule time for important tasks
  - Need to organize or plan work
  - Time to review/clean up work
  
  **PERSONALITY ADAPTATION FOR ACTIONABLE SUGGESTIONS:**
  - Frame action messages using the {{ personality_tone }} tone
  - Prioritize actions that align with: {{ personality_priorities }}
  - Use language patterns like: {{ personality_phrases }}
  - Maintain personality consistency while keeping actions specific and executable
  
  **OUTPUT FORMAT: Valid JSON only**
  
  Create a JSON object with a single "actionable_suggestion" object (not an array). The suggestion should have these fields:
  - action_type: The type of action (email, slack, meeting, calendar, github, task, reminder, document, status, review, mcp)
  - observation_type: What kind of pattern was observed (communication, follow_up, scheduling, code_review, completion, deadline, setup, etc.)
  - message: The suggestion text to display to the user
  - action_command: The command/action identifier for execution
  
  **AVAILABLE ACTION COMMANDS (only use these):**
  - compose_team_update (email team update)
  - create_follow_up_meeting (schedule meeting)
  - enable_slack_and_post (setup and post to Slack)
  - post_slack_update (post to Slack)
  - review_pending_prs (review GitHub PRs)
  - setup_slack_mcp_and_post (configure Slack MCP)
  - update_project_status (update project status)
  
  **EXAMPLE JSON OUTPUT:**
  {
    "actionable_suggestion": {
      "action_type": "email",
      "observation_type": "communication",
      "message": "You haven't sent an update to the team in 3 days. Send status update?",
      "action_command": "compose_team_update"
    }
  }
  
  **ACTION TYPES:**
  - email: Send an email
  - slack: Send Slack message/update
  - message: Send a message/update
  - meeting: Create or schedule a meeting
  - calendar: Schedule time/events
  - github: GitHub actions (PR, issues, etc.)
  - task: Create or update a task
  - reminder: Set a reminder
  - document: Create or update documentation
  - status: Update status/progress
  - review: Review or organize work
  - mcp: Setup/configure required MCP servers
  
  Focus on:
  - Recent patterns (last 1-3 days)
  - Important/urgent items
  - Communication responsibilities
  - Work momentum and completion
  
  **SELECTION CRITERIA - Choose the MOST URGENT actionable item:**
  - Focus on the single most time-sensitive action needed right now
  - Prioritize communication gaps that need immediate attention
  - Choose actions that will have the biggest impact on current work momentum
  - Select based on patterns showing the highest urgency or opportunity cost
  
  Save to ~/.local/share/goose-perception/AVATAR_MESSAGE.json as valid JSON.
  Only suggest an action based on real patterns you observe in the provided data.
  If there's insufficient data, provide no suggestion rather than a generic one.
  Do not include any text outside the JSON object - output ONLY valid JSON. Overwrite the file if it already exists.